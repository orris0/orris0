define(["lunr", "jquery.ui", "jquery.highlight"], function (lunr) {
	// case-insensitive search (found on web)
	$.extend($.expr[":"], {
		"containsNC": function (elem, i, match, array) {
			return (elem.textContent || elem.innerText || "").toLowerCase().indexOf((match[3] || "").toLowerCase()) >= 0;
		}
	});

	function htmlEscape(str) {
		return String(str)
			/*
			.replace(/&/g, '&amp;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&#39;')
			*/
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;');
	}

	function romanize (num) {
		if (!+num)
			return false;
		var digits = String(+num).split(""),
			key = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM",
				"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC",
				"","I","II","III","IV","V","VI","VII","VIII","IX"],
			roman = "",
			i = 3;
		while (i--)
			roman = (key[+digits.pop() + (i * 10)] || "") + roman;
		return Array(+digits.join("") + 1).join("M") + roman;
	}

	function setNodeAtDepth  (nodes, depth, node) {
		var depths = depth.toString().split(",");
		var curLevel = nodes;
		for (var i = 0; i < depths.length; i++) {
			var curDepth = depths[i];
			if (curLevel[curDepth] == undefined) {
				curLevel[curDepth] = { node: null, children: [] };
			}

			if (i == depths.length - 1) {
				curLevel[curDepth].node = node;
			}

			curLevel = curLevel[curDepth].children;
		}
	}

	function convertHabitatDataToNodes (options, data) {
		var nodes = [];

		addChildNodes(options, nodes, data.find("> li"));

		return nodes;
	}

	function addChildNodes (options, nodes, children) {
		var numUpdates = 0;


		for (var i = 0; i < children.length; i++) {
			var d = children.eq(i);

			var anchor = d.find("> a");
			var label = anchor.text();

			var labelText = label;

			var extra_classes = [];

			if (anchor.hasClass("cup-new") || anchor.hasClass("cup-new-1")) {
				extra_classes.push("new-1");
				extra_classes.push("rev-1");
				numUpdates = Math.max(numUpdates, 1);
			}
			if (anchor.hasClass('cup-new-2')) {
				extra_classes.push("new-2");
				extra_classes.push("rev-2");
				numUpdates = Math.max(numUpdates, 2);
			}

			if (anchor.hasClass("cup-change") || anchor.hasClass("cup-change-1")) {
				extra_classes.push("updated-1");
				extra_classes.push("rev-1");
				numUpdates = Math.max(numUpdates, 1);
			}
			if (anchor.hasClass("cup-change-2")) {
				extra_classes.push("updated-2");
				extra_classes.push("rev-2");
				numUpdates = Math.max(numUpdates, 2);
			}

			if (anchor.hasClass("cup-delete") || anchor.hasClass("cup-delete-1")) {
				extra_classes.push("deleted");
				extra_classes.push("rev-1");
				numUpdates = Math.max(numUpdates, 1);
			}
			if (anchor.hasClass("cup-delete-2")) {
				extra_classes.push("deleted");
				extra_classes.push("rev-2");
				numUpdates = Math.max(numUpdates, 2);
			}

			var shortLabel = undefined;

			if (options.skin) {
				if (options.skin.trim() == "CIB") {
					var match = labelText.match(/^Chapter (\d+):/);
					if (match) {
						shortLabel = match[1];
					}
				} else if (options.skin.trim() == "ABG") {
					var match = labelText.match(/^Part\s*(\w+):\s*(.*)/);
					if (match) {
						shortLabel = match[1];
						label = match[2];
					}
				} else if (options.skin.trim() == "Default" && options.type && options.type.trim() == "habitat") {
					var match = labelText.match(/^Chapter (\d+): (.*)/);
					if (match) {
						shortLabel = match[1];
						label = match[2];
					}
				}
			}

			var node = { desc: label, href: anchor.attr("href"), short: shortLabel };

			var extras = extra_classes.filter(function (item, i , a) {
				return i == a.indexOf(item);
			});

			var obj = { node: node, children: [], extra_classes: extras.join(" ") };

			nodes[i] = obj;

			if (options.numberOfUpdates == undefined) options.numberOfUpdates = 0;
			options.numberOfUpdates = Math.max(options.numberOfUpdates, numUpdates);

			addChildNodes(options, obj.children, d.find("> ol > li"));
		}
	}

	function findNodeForIndex (nodes, index) {
		for (var i = 0; i < nodes.length; i++) {
			if (nodes[i].node.index == index) {
				return nodes[i];
			} else {
				var r = findNodeForIndex(nodes[i].children, index);
				if (r) {
					return r;
				}
			}
		}

		return undefined;
	}

	function getShortLabel (node) {
		var p = node;

		while (p) {
			if (p.short)
				return p.short;
			else
				p = p.parent;
		}
		return null;
	}

	function toggleDropper (event) {
		event.preventDefault();
		event.stopPropagation();

		var link = $(this).parents("li").eq(0);
		var tree = link.children("ul.tree");

		refreshDropperStatus(link);

		tree.toggle(300);
	}

	function refreshDropperStatus (link, toggle) {
		if (toggle == undefined) toggle = true;

		var tree = link.find("ul.tree");

		$.each(tree, function (index, element) {
			var el = $(element);

			var li = el.parent("li");

			var vis = el.css("display") == "block";
			if (index == 0 && toggle) vis = !vis;

			if (vis) {
				li.find(".dropper.opened").first().show(0);
				li.find(".dropper.closed").first().hide(0);
				if (li.hasClass("tree-parent"))
					li.attr("aria-expanded", true);
			} else {
				li.find(".dropper.opened").first().hide(0);
				li.find(".dropper.closed").first().show(0);
				if (li.hasClass("tree-parent"))
					li.attr("aria-expanded", false);
			}
		});
	}

	function makeSelected (el) {
		var prev = $(".hit.selected");
		if (prev.length) {
			prev.removeClass("selected").attr("aria-label", prev.data("label"));
		}

		$(el).addClass("selected").attr("aria-label", $(el).data("label") + " selected");
	}

	function MakeAShortLabelForSearchResults (node) {
		var depths = node.node.depth.slice();
		var short = getShortLabel(node.node);
		if (short) {
			depths[0] = short;
		}

		var label = depths.join(".");
		return label;
	}

	function sortByRef (a, b) {
		return parseInt(a.ref) - parseInt(b.ref);
	}

	$.widget("que.TOCTree", {

		options: {},

		_create: function () {
			this.holder = this.element.find(".toc-holder");

			var me = this;

			this.holder.on("keydown", $.proxy(this.onKeyboardNavigation, this));

			this.refresh();

			if (this.options.expander)
				$(this.options.expander).click($.proxy(this.expandOrCollapse, this));

			this.searchCounter = undefined;

			this.element.find(".highlight-button").click($.proxy(this.onClickHighlight, this));

			if (this.options.skin && this.options.skin.trim() == "Microsoft") {
				this.element.find(".scroller").on("wheel mousewheel", $.proxy(this.preventTOCEdgeScrolling, this));
			}
		},

		refresh: function () {
			if (!this.options || !this.options.data) return;

			this.holder.empty();

			if (this.options.type == "habitat") {
				this.refreshFromHabitatData();
			} else if (this.options.type == "epub") {
				this.refreshFromMetadata();
				this.collapseTOC();
			} else if (this.options.type == "frost") {
				this.refreshFromMetadata();
			} else {
				this.refreshFromMetadata();
			}

			var p = $("<p>", { id: "query-summary", class: "blocky", text: "" });
			this.holder.append(p);

			if (this.options.metadata.bannerDownloadLink) {
				var title = this.options.metadata.bannerDownloadLabel ? this.options.metadata.bannerDownloadLabel : "Download all video.";
				var lbl = this.options.metadata.bannerDownloadLabel ? " " + this.options.metadata.bannerDownloadLabel : "";

				var b = $('<button id="custom-download" class="btn btn-success download-button" title="' + title + '"><i class="fa fa-cloud-download"></i>' + lbl + '</button>');
				b.click($.proxy(this.onClickDownload, this, this.options.metadata.bannerDownloadLink));
				$("#header-nav .navbar-brand").append(b);

			}
		},

		addNodes: function (params, nodes, dest, depth) {
			var otherIndex = 1;

			for (var i = 0; i < nodes.length; i++) {
				var d = nodes[i];

				var new_depth = depth.slice();

				if (this.options.skin) {
					if (this.options.skin.trim() == "CIB") {
						if (d.node.short) {
							new_depth.push(d.node.short);
						} else {
							if (depth.length == 0) {
								new_depth.push(romanize(otherIndex));
								otherIndex++;
							} else {
								new_depth.push(i + 1);
							}
						}
					} else if (this.options.skin.trim() == "ABG") {
						// remove extraneous Appendix from ABG titles (can't seem to do it in Habitat)
						if (d.node.desc == "Appendix") {
							d = null;
						}
					}
				} else {
					new_depth.push(i + 1);
				}

				if (d) {
					this.addParentNode(params, d, dest, new_depth);
				}
			}
		},

		addParentNode: function (params, d, dest, depth) {
			var li, linkholder;

			if (d && d.node) {
				var index = params.counter;

				d.node.depth = depth;
				d.node.index = index;

				li = $("<li>", { class: "toc-tabstop", tabindex: 0, role: "link" });
				dest.append(li);

				if (d && d.children && d.children.length > 0) {
					var lbl = $("<div>", {class: "tree-toggler nav-header toc-label"});
					li.append(lbl);
					linkholder = lbl;

					var dropper = $("<i>", { class: "dropper opened fa fa-caret-down" }).attr("aria-hidden", true);
					dropper.click(toggleDropper);
					dropper.keydown(function (event) {
						if (event.keyCode == 13 || event.keyCode == 32) {
							toggleDropper.apply(dropper, [event]);
						}
					});
					linkholder.append(dropper);

					dropper = $("<i>", { class: "dropper closed fa fa-caret-right" }).attr("aria-hidden", true);
					dropper.click(toggleDropper);
					dropper.keydown(function (event) {
						if (event.keyCode == 13 || event.keyCode == 32) {
							toggleDropper.apply(dropper, [event]);
						}
					});
					linkholder.append(dropper);

					var ul = $("<ul>", {class: "nav nav-list tree", role: "group"});
					li.append(ul);

					for (var i = 0; i < d.children.length; i++) {
						if (d.children[i] && d.children[i].node)
							d.children[i].node.parent = d.node;
					}
					li.addClass("tree-parent");
				} else {
					linkholder = li;
				}

				li.attr("data-index", index);

				var a = $("<a>").attr( { href: d.node.href });

				var entry_text = d.node.desc;

				var classes = "desc";
				if (d.extra_classes) classes += " " + d.extra_classes;
				if (d.node.disabled) {
					a.addClass("disabled");
				}

				var text = htmlEscape(entry_text);

				if (d.extra_classes && d.extra_classes.indexOf("updated") != -1) {
					text += " <span class='badge change'>updated</span>";
				}

				if (d.extra_classes && d.extra_classes.indexOf("new") != -1) {
					text += " <span class='badge new'>new</span>";
				}

				if (d.extra_classes && d.extra_classes.indexOf("deleted") != -1) {
					text += " <span class='badge deleted'>deleted</span>";
				}

				if (d.node.free) {
					text += " <span class='badge free'>(Free)</span>";
				}

				if (d.node.cost !== undefined) {
					switch (d.node.cost) {
						case 0:
							text += ' <i class="fa fa-ticket cost" aria-hidden="true"></i>';
							break;
						case 1:
							text += ' <i class="fa fa-usd cost" aria-hidden="true"></i>';
							break;
					}
				}

				var sp = $("<span>", {class: classes, html: text});

				// horizontal line to indicate current selection in TOC
				var indicator = $("<div>", { class: "indicator" });
				sp.append(indicator);

				var short = $("<span>", {class: "level short tree-toggler"});

				var short_label;
				if (depth.length <= 4) {
					short_label = depth.join(".");
				} else {
					short_label = depth[depth.length - 1];
					short.addClass("invisible");
				}

				if (d.node.short) {
					short.html(d.node.short);
				} else {
					if (this.options.type == "habitat") {
						if (this.options.skin && this.options.skin.trim() == "ABG") {
							var match = entry_text.match(/^(\d+): (.*)/);
							if (match) {
								sp.html(match[2]);
								short_label = match[1];
								short.html(short_label);
							}

							if (short_label == "") {
								short.addClass("invisible");
							}
						} else {
							short_label = depth[depth.length - 1];
							short.html(short_label);
						}
					} else if (this.options.type == "epub" || this.options.type == "frost") {
						short_label = depth[depth.length - 1];
						short.html(short_label);//.addClass("invisible");
					} else {
						short.addClass("invisible");
						/* not using this (was for videos)
						var shortcut = d.node.desc.toLowerCase();

						if (shortcut == "introduction") {
							short.html("<i class='fa fa-home'></i>");
						} else if (shortcut == "summary") {
							short.html("<i class='fa fa-flag'></i>");
						} else {
							short.html(d.node.desc.substr(0, 1));
						}
						*/
					}
				}

				if (d.node.download) {
					linkholder.addClass("has-download");
					var dl = $("<button class='btn btn-success download-button' title='Download this section.'><i class='fa fa-cloud-download'></i></button>");
					dl.attr("title", "Download: " + d.node.desc);
					var me = this;
					// special case for downloadable pdf (because they won't work with the iframe method)
					if (d.node.download.toLowerCase().substr(-3) == "pdf") {
						var a_link = $("<a download>").attr( { href: d.node.download }).css("display", "none");
						dl.append(a_link);
						dl.click(function (event) {
							$(event.currentTarget).find("a")[0].click();
							me.markCompleted(d.node.index);
						});
					} else {
						dl.click(function (event) {
							me.onClickDownload(d.node.download, event);
							me.markCompleted(d.node.index);
						});
					}

					linkholder.append(dl);
				}

				a.append(short);
				a.append(sp);

				if (d.node.src && d.node.src.substr(0, 4).toLowerCase() == "http") {
					var external = $("<i class='external-indicator fa fa-external-link' aria-hidden='true'></i>");
					a.append(external);
				}

				a.appendTo(linkholder);

				switch (this.options.type) {
					case "video": // ie, video
						if (d.node.video || d.node.src) {
							a.click($.proxy(this.launchVideo, this, index, {toggle: false}));
							li.keydown(function (event) {
								if (event.keyCode == 13 || event.keyCode == 32) {
									//func(event);
								}
							});
						} else {
							linkholder.addClass("header");
							a.click(toggleDropper);
							li.keydown(function (event) {
								if (event.keyCode == 13 || event.keyCode == 32) {
									toggleDropper(event);
								}
							});
						}
						break;
					default:
						a.click($.proxy(this.launchVideo, this, index, {toggle: false}));
						var func = $.proxy(this.launchVideo, this, index, {toggle: false});
						var me = this;
						li.keydown(function (event) {
							if (event.keyCode == 13 || event.keyCode == 32) {
								event.preventDefault();
								event.stopPropagation();
								var index = $(event.target).attr("data-index");
								me.launchVideo(index, {toggle:false}, event);
							}
						});
						break;
				}

				params.counter++;
			}

			if (ul == undefined) ul = dest;

			this.addNodes(params, d.children, ul, depth);
		},

		refreshFromHabitatData: function () {
			var ol = $(this.options.data).find("nav > ol");

			// for some reason, this fallback was necessary when running locally (or when some of the js code was loaded via AWS?)
			if (ol.length == 0) {
				ol = $(this.options.data).children().eq(1);
			}

			var nodes = convertHabitatDataToNodes(this.options, ol);

			this.nodes = nodes;

			this.addNodes( { counter: 0 }, nodes, this.holder, []);

			this.refreshUpdatePanel();
		},

		refreshFromMetadata: function () {
			var d = this.options.data;
			var nodes = [];

			for (var i = 0; i < d.length; i++) {
				var n = d[i];
				setNodeAtDepth(nodes, n.depth, n);
			}

			this.addNodes( { counter: 0 }, nodes, this.holder, []);

			this.nodes = nodes;
		},
		
		launchVideo: function (index, options, event) {
			if (event) event.preventDefault();
			this.element.trigger("playvideo", { depth: index, options: options });

			if (options && options.toggle) {
				var li = this.element.find("li[data-index=" + index + "] > ul");
				if (li.length) {
					var parent_li = this.element.find("li[data-index=" + index + "]");
					refreshDropperStatus(parent_li);
					li.toggle(300);
				}
			} else {
				// find the toc entry for this index and expand it
				var li = this.element.find("li[data-index=" + index + "] > ul");
				if (li.length) {
					li.show(300);
					var parent_li = this.element.find("li[data-index=" + index + "]");
					refreshDropperStatus(parent_li, false);
				}
			}
		},
		
		_destroy: function () {
		},

		_setOption: function ( key, value ) {
			switch (key) {
				case "data":
					this.options["data"] = value;
					this.refresh();
					break;
				default:
					//this.options[ key ] = value;
					break;
			}

			this._super( "_setOption", key, value );
		},

		setSearchIndex: function (data) {
			if (data)
				this.searchIndex = lunr.Index.load(data);
		},

		hasSearchIndex: function () {
			return this.searchIndex != undefined;
		},

		search: function (term) {
			this.searchCounter = undefined;

			if (!this.searchIndex) {
				this.searchByTitles(term);
				//this.element.parent().find(".toc").show("slide");
				return;
			}

			var results = this.searchIndex.search(term);

			$(".search-result-list").empty();

			if (this.options.skin && this.options.skin.trim() == "Microsoft") {
				results = results.sort(sortByRef);
			}

			for (var i = 0; i < results.length; i++) {
				var index = results[i].ref;
				var hit;
				if (this.options.metadata.length) {
					// ePub/Habitat
					hit = this.options.metadata[index];
				} else {
					// video
					hit = this.options.metadata.toc[index];
				}
				if (hit) {
					var node = findNodeForIndex(this.nodes, index);
					var label = MakeAShortLabelForSearchResults(node);
					var section_label = " <p class='section-label'>" + label + "</p>";
					var hit_label = "<p class='hit-label'>" + hit.desc + "</p>";
					var hitResult = $("<li>", {class: "hit", tabindex: 0, html: section_label + hit_label}).data( { "index": index, label: hit.desc } ).attr( { "role": "", "aria-label": hit.desc } );
					var me = this;
					hitResult.click(function (event) {
						var index = $(this).data("index");
						me.launchVideo(index, { highlight: term }, event);
						makeSelected(this);
					});
					hitResult.keypress(function (event) {
						if (event.keyCode != 9) {
							var index = $(this).data("index");
							me.launchVideo(index, {highlight: term}, event);
							makeSelected(this);
						}
					});
					$(".search-result-list").append(hitResult);
				}
			}

			if (term != "") {
				this.showSearchPane(results.length);
			} else {
				$("#hit-count").text("");
				$("button#search-previous").addClass("disabled").attr("disabled", true);
				$("button#search-next").addClass("disabled").attr("disabled", true);
			}
		},

		showSearchPane: function (resultCount) {
			this.element.parent().find(".search-results").attr("aria-expanded", true);

			//this.element.parent().find(".toc").hide("slide");
			this.element.parent().find(".search-results").delay(300).show("slide");

			if (resultCount == undefined) {
				$("#hit-count").text("");

				$("button#search-previous").addClass("disabled").attr("disabled", true);
				$("button#search-next").addClass("disabled").attr("disabled", true);
			} else {
				var lbl = resultCount + " result" + (resultCount != 1 ? "s" : "");

				$("#hit-count").text(lbl);

				if (resultCount > 0) {
					$("button#search-previous").removeClass("disabled").attr("disabled", null);
					$("button#search-next").removeClass("disabled").attr("disabled", null);
				} else {
					$("button#search-previous").addClass("disabled").attr("disabled", true);
					$("button#search-next").addClass("disabled").attr("disabled", true);

					$(".search-result-list").append("<p class='blocky text-center'>No results found. Try a different search?</p>");
				}
			}

			// NOTE: this is a terrible kludge to try to get the search results to appear (a timeout missing or less than 500 would leave the .search-results with display: none, for some reason)
			var me = this;
			setTimeout(function () {
				me.element.parent().find(".search-results").show("slide");

				setTimeout(function () {
					me.element.parent().find("#query-too").focus();
				}, 300);
			}, 500);
		},

		closeSearch: function () {
			this.element.parent().find(".search-results").attr("aria-expanded", false);

			if (!this.searchIndex) {
				this.searchByTitles("");
			} else {
				//this.element.parents("#contents").find(".toc").delay(300).show("slide");
				this.element.parents("#contents").find(".search-results").hide("slide");
				this.element.trigger("closesearch");
			}
		},

		searchNext: function (direction) {
			var s = $(".hit.selected");
			if (s.length) {
				s = s.index() + direction;
				if (s > $(".hit").length - 1)
					s = 0;
				else if (s < 0)
					s = $(".hit").length - 1;
			} else {
				s = 0;
			}

			this.searchCounter = s;

			$(".hit").eq(this.searchCounter).click();

			// keep the selected hit scrolled in the middle
			this.autoScrollSearchResults();
		},

		autoScrollSearchResults: function () {
			var scroller = $(".search-results .scroller");
			var t = scroller.scrollTop();
			var h = scroller.height();
			var entry = $(".hit.selected");

			if (!entry.length) return;

			var p = entry.offset().top;
			var desired_top = (h * .5);
			var adj = p - desired_top;
			var dest = (t + adj);
			var currTarget = scroller.attr("data-scrolltarget");
			var diff = (currTarget - dest);
			if (currTarget == undefined || Math.abs(diff) > 20) {
				scroller.attr("data-scrolltarget", dest);
				scroller.stop().animate(
					{
						scrollTop: dest
					},
					{
						duration: 1000,
						complete: function () {
						}
					}
				);
			}
		},

		searchByTitles: function (term) {
			var results = { toShow: $(), toHide: $() };

			results.toShow = this.holder.find("li:containsNC('" + term + "')");
			results.toHide = this.holder.find("li:not(:containsNC('" + term + "'))");

			if (term != "") {
				if (results.toShow.length) {
					$("#query-summary").text("Search Results: " + results.toShow.length);
				} else {
					$("#query-summary").text("No matching titles. Try a different search?");
				}
			} else {
				results.toShow = this.holder.find("li");
				results.toHide = $();
				$("#query-summary").text("");
			}

			results.toShow.show(300);
			results.toHide.hide(300);
		},

		markStarted: function (index) {
			var el = this.holder.find("[data-index=" + index + "]");
			var checked = el.find("> i.checked");
			checked.remove();

			el.find("a").first().attr("aria-describedby", "progress" + index);

			el.append("<i id='progress" + index + "' class='checked fa fa-adjust fa-flip-horizontal' title='Progress started.' aria-label='Section started' role='status'></i>");
		},

		markCompleted: function (index) {
			if (index > this.options.data.length - 1) {
				this.options.data[index] = {};
			}

			this.options.data[index].completed = true;

			var el = this.holder.find("[data-index=" + index + "]");
			var a = el.find("> label a span.desc, > a span.desc, a span.desc");
			//var checked = a.find("i.checked");
			var checked = el.find("> i.checked");
			checked.remove();

			el.find("a").first().attr("aria-describedby", "progress" + index);

			// use half-circle to show that some children still need to be completed
			if (el.find("ul li").length) {
				var childrenComplete = this.checkForAllChildrenComplete(index);
				if (childrenComplete) {
					el.append("<i id='progress" + index + "' class='checked fa fa-check-circle' title='Progress completed.' aria-label='Section completed' role='status'></i>");
				} else {
					el.append("<i id='progress" + index + "' class='checked fa fa-adjust fa-flip-horizontal' title='Progress started.' aria-label='Section started' role='status'></i>");
				}
			} else {
				el.append("<i id='progress" + index + "' class='checked fa fa-check-circle' title='Progress completed.' aria-label='Section completed' role='status'></i>");
			}

			a.removeClass("completed").addClass("completed");

			// now check parents, grandparents, etc. to see if they can now be considered complete
			// TODO: is this code used for ePubs?
			var p = this.options.data[index].parent;

			while (p) {
				if (p.completed) {
					this.markCompleted(p.index);

					p = p.parent;
				} else
					p = null;
			}
		},

		markIncomplete: function (index) {
			if (index > this.options.data.length - 1) {
				this.options.data[index] = {};
			}

			this.options.data[index].completed = false;

			var el = this.holder.find("[data-index=" + index + "]");
			var a = el.find("> label a span.desc, > a span.desc, a span.desc");
			var checked = el.find("> i.checked");
			checked.remove();

			el.find("a").first().attr("aria-describedby", "progress" + index);

			el.append("<i id='progress" + index + "' class='checked fa fa-adjust fa-flip-horizontal' title='Progress started.' aria-label='Section started' role='status'></i>");

			a.removeClass("completed");
		},

		markNotStartedOrCompleted: function (index) {
			var el = this.holder.find("[data-index=" + index + "]");
			var checked = el.find("> i.checked");
			checked.remove();

			el.find("a").first().attr("aria-describedby", null);

			var a = el.find("> label a span.desc, > a span.desc, a span.desc");
			a.removeClass("completed");
		},

		checkForAllChildrenComplete: function (index) {
			return this.checkChildrenComplete(index);
		},

		checkChildrenComplete: function (index) {
			var thisParent = this.options.data[index];

			var ok = true;
			for (var i = 0; i < this.options.data.length; i++) {
				var childNode = this.options.data[i];
				if (childNode && childNode.parent == thisParent) {
					var complete = this.options.data[childNode.index].completed;
					if (!complete) {
						ok = false;
						break;
					} else {
						// check children
						for (var j = 0; j < this.options.data.length; j++) {
							if (this.options.data[j] && this.options.data[j].parent == childNode) {
								complete = this.checkChildrenComplete(j);
								if (!complete) {
									ok = false;
									break;
								}
							}
						}
					}
					if (!ok)
						break;
				}
			}

			return ok;
		},

		setStatus: function (items) {
			for (var i = 0; i < items.length; i++) {
				var item = items[i];
				if (item) {
					if (item.completed)
						this.markCompleted(i);
					else if (item.started)
						this.markStarted(i);
					else
						this.markNotStartedOrCompleted(i);
				}
			}
		},

		collapseTOC: function () {
			$(this.options.expander).attr("aria-expanded", false);
			$(this.options.expander + " i").removeClass("fa-caret-up").addClass("fa-caret-down");
			this.holder.find("> li > ul").hide(300);
			this.holder.find(".dropper.opened").hide(0);
			this.holder.find(".dropper.closed").show(0);

			this.holder.find("li.tree-parent").attr("aria-expanded", false);
		},

		expandTOC: function () {
			$(this.options.expander).attr("aria-expanded", true);
			$(this.options.expander + " i").removeClass("fa-caret-down").addClass("fa-caret-up");
			this.holder.find("li ul").show(300);
			this.holder.find(".dropper.opened").show(0);
			this.holder.find(".dropper.closed").hide(0);

			this.holder.find("li.tree-parent").attr("aria-expanded", true);
		},

		expandOrCollapse: function (event) {
			var vis = $(this.options.expander + " i").hasClass("fa-caret-up");

			if (vis) {
				this.collapseTOC();
			} else {
				this.expandTOC();
			}
		},

		refreshAllDroppers: function (index) {
			refreshDropperStatus(this.element, false);
		},

		onClickDownload: function (file, event) {
			var ifrm = $("#downloader");
			ifrm.attr("src", file);

			ga("send", "event", "interface", "download", file);
		},

		onClickHighlight: function (event) {
			var versions = this.getSelectedUpdates();

			var NUM_VERSIONS = this.options.numberOfUpdates;

			for (var i = 1; i <= NUM_VERSIONS; i++) {
				if (versions.indexOf(String(i)) != -1) {
					this.element.find(".new-" + i + " .badge.new").show();
					this.element.find(".updated-" + i + " .badge.change").show();
					this.element.find(".deleted-" + i + " .badge.deleted").show();
				} else {
					this.element.find(".new-" + i + " .badge.new").hide();
					this.element.find(".updated-" + i + " .badge.change").hide();
					this.element.find(".deleted-" + i + " .badge.deleted").hide();
				}
			}

			this.refreshUpdateBadgesInFrame();

			var version = $(event.target).attr("data-version");

			ga("send", "event", "interface", "history_toggle", version);
		},

		getNumberOfUpdates: function () {
			return this.options.numberOfUpdates === undefined ? 0 : this.options.numberOfUpdates;
		},

		getSelectedUpdates: function () {
			return $.map(this.element.find(".highlight-button:checked"), function (elem, index) { return $(elem).attr("data-version"); });
		},

		refreshUpdateBadgesInFrame: function () {
			this.element.trigger("showSelectedUpdates");
		},

		refreshUpdatePanel: function () {
			this.element.find("#versions input + label, input").remove();

			if (this.options.numberOfUpdates > 0) {
				for (var i = 1; i <= this.options.numberOfUpdates; i++) {
					var label = "1." + i;
					if (this.options.updateLabels && this.options.updateLabels.length == this.options.numberOfUpdates) {
						// get the human readable version
						label = this.options.updateLabels[i - 1];
					}
					var checkbox = $('<input data-version="' + i + '" class="highlight-button" type="checkbox" checked><label>' + label + '</label>');
					this.element.find("#versions").append(checkbox);
				}
			}
		},

		preventTOCEdgeScrolling: function (event) {
			var s = this.element.find(".scroller");
			var t = s.scrollTop() + s.innerHeight();
			var h = s[0].scrollHeight;
			if ( (t >= h && event.originalEvent.deltaY > 0) || (s.scrollTop() <= 0 && event.originalEvent.deltaY < 0) ) {
				event.preventDefault();
			}
		},

		// go to next visible child, sibling, or uncle (in that order)
		getNextVisibleTreeItem: function (link) {
			var index = parseInt(link.attr("data-index"));
			var holder = link.parents(".toc-holder");

			for (var i = index + 1; i < this.options.data.length; i++) {
				var next = holder.find("[data-index=" + i + "]");
				if (next.length && next.is(":visible")) {
					return next;
				}
			}
		},

		getPrevVisibleTreeItem: function (link) {
			var index = parseInt(link.attr("data-index"));
			var holder = link.parents(".toc-holder");

			if (index == 0) index = this.options.data.length;

			for (var i = index - 1; i >= 0; i--) {
				var prev = holder.find("[data-index=" + i + "]");
				if (prev.length && prev.is(":visible")) {
					return prev;
				}
			}
		},

		onKeyboardNavigation: function (event) {
			var handled = false;
			var link = $(event.currentTarget).find("li:focus");

			switch (event.keyCode) {
				case 38:
					var prev = this.getPrevVisibleTreeItem(link);
					if (prev) prev.focus();
					else {
						var a = $(event.currentTarget).find("li").first();
						a.focus();
					}

					handled = true;
					break;
				case 40:
					var next = this.getNextVisibleTreeItem(link);
					if (next) next.focus();
					else {
						var a = $(event.currentTarget).find("li").first();
						a.focus();
					}

					handled = true;
					break;
				case 37:
					var tree = link.children("ul.tree");
					tree.hide(0);
					refreshDropperStatus(link, false);

					handled = true;
					break;
				case 39:
					var tree = link.children("ul.tree");
					tree.show(0);
					refreshDropperStatus(link, false);

					handled = true;
					break;
			}

			if (handled) {
				event.preventDefault();
			}
		}
	});
});
